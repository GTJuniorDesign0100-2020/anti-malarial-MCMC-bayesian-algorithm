{"version":3,"sources":["components/Help.jsx","utils.js","components/RunButton.jsx","components/Settings.jsx","components/SortableTable.jsx","components/DynTable.jsx","components/LoadingBar.jsx","components/PresetLoadingBar.jsx","components/Footer.jsx","components/MainScreen.jsx","index.js"],"names":["Help","props","state","help","trigger","className","position","target","rel","href","React","Component","estimateRunTime","inputFile","numIterations","size","RunButton","locirepeatsString","numIters","handleSubmit","bind","handleChangeFile","handleChangeLocirepeats","handleChangeIters","event","preventDefault","locirepeats","this","split","map","substring","parseInt","trim","filter","setState","files","value","onSubmit","htmlFor","type","name","onChange","style","marginLeft","toFixed","Settings","display","justifyContent","SortableTable","columnNames","columnSortKeys","items","itemToTableRowFunc","useSortableData","sortedItems","requestSort","sortConfig","getClassNamesFor","key","direction","undefined","buttonStyles","width","height","fontWeight","align","margin","columnName","i","onClick","length","item","textAlign","colSpan","config","useState","setSortConfig","useMemo","sortableItems","sort","a","b","DynTable","Object","values","data","reverse","resultData","date","inputFilename","status","csvFileText","results","output_file_text","toISOString","toLocaleDateString","toLocaleTimeString","extra_filenames","keys","splice","indexOf","csvFileName","fileNames","fileContentDict","downloadName","getResultDownloadLinks","ZipDownloadLink","zip","JSZip","filename","csvText","file","evt","generateAsync","then","zipContent","saveAs","CSVDownloadLink","csvUri","encodeURI","download","LoadingBar","percentCompleted","secondsRunning","Math","max","min","round","percent","strokeColor","strokeWidth","trailWidth","PresetLoadingBar","timeToComplete","Date","now","startTime","secondsSinceStart","setSecondsSince","setTimeout","Footer","MainScreen","tableData","createNewAlgoRun","updateRunValues","runDatetime","runKey","estimatedTime","formData","FormData","append","locirepeats_params","reduce","param_string","locirepeat","Promise","resolve","reject","fetch","method","body","response","json","jsonData","error","message","recrudescenceAPIRequest","totalRunTime","errorJSON","newRunValues","gridColumnStart","gridRowStart","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dd70da3.chunk.js","sourcesContent":["import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\n/*\r\nCreates a button that directs to help document.\r\n\r\nTODO: evaluate whether help document should be displayed on page, as popup, or\r\nas separate page depending on length & content of document. Make text abstract\r\nto allow for language changes.\r\n*/\r\n\r\nexport default class Help extends React.Component {\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = { help: null };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Popup\r\n        trigger={\r\n          <button className=\"help main-button shadow\">\r\n            Help\r\n          </button>\r\n        }\r\n        position=\"right\">\r\n        <div className=\"popup-box\">If you need help with how to use the application, check out the <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://docs.google.com/document/d/14xnfxBzDkTYQqryIv3YDtga34cPTaUkFUND-bL-N7UY/edit?usp=sharing\">FAQ Page</a>!</div>\r\n      </Popup>\r\n    );\r\n  }\r\n}\r\n","/**\r\n * Make a request to the recrudescence API, and return the result if successful\r\n * as a promise\r\n * @param inputfile The file data object to pass to the API for analysis\r\n * @param locirepeats The integer list of locirepeats to pass to the API\r\n * @param numIterations The number of iterations to run the algorithm for\r\n */\r\nexport function recrudescenceAPIRequest(inputFile, locirepeats, numIterations) {\r\n  let formData = new FormData();\r\n  formData.append('file', inputFile);\r\n\r\n  const locirepeats_params = locirepeats.reduce(\r\n    (param_string, locirepeat) => `${param_string}&locirepeat=${locirepeat}`,\r\n    '')\r\n\r\n  return new Promise((resolve, reject) => {\r\n    fetch(`/api/v1/recrudescences?iterations=${numIterations}${locirepeats_params}`, {\r\n      method: 'POST',\r\n      body: formData\r\n    })\r\n    .then(response => {\r\n      response.json().then(jsonData => {\r\n        // Pass JSON API response to a callback function\r\n        if (response.status < 400) {\r\n          resolve(jsonData);\r\n        } else {\r\n          reject(jsonData);\r\n        }\r\n      }, error => {\r\n        // Use same JSON response format as the server\r\n        reject({message: 'Failed to contact API server'});\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * Returns the estimated time the algorithm will take to complete for the file\r\n * in seconds\r\n * @param inputFile The file to be run by the algorithm\r\n * @param numIterations The number of iterations the algorithm is set to run for\r\n */\r\nexport function estimateRunTime(inputFile, numIterations) {\r\n  const inputFileSize = inputFile.size;\r\n  return 2.0 + 70.0 * (numIterations / 1000.0) * (inputFileSize / 28500.0)\r\n}\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport {estimateRunTime} from '../utils';\r\n\r\nexport default class RunButton extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        inputFile: '', locirepeatsString: '', numIters: 10000\r\n    };\r\n\r\n    // bind functions to this class\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChangeFile = this.handleChangeFile.bind(this);\r\n    this.handleChangeLocirepeats = this.handleChangeLocirepeats.bind(this);\r\n    this.handleChangeIters = this.handleChangeIters.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    // Convert string into a list of locirepeats\r\n    let locirepeats = this.state.locirepeatsString.split(',')\r\n      .map(substring => parseInt(substring.trim(), 10))\r\n      .filter(substring => substring); // Eliminate empty/non-numerical strings\r\n\r\n    this.props.handleSubmit(this.state.inputFile, locirepeats, this.state.numIters);\r\n  }\r\n\r\n  handleChangeFile(event) {\r\n    this.setState({inputFile: event.target.files[0]});\r\n  }\r\n\r\n  handleChangeLocirepeats(event) {\r\n    this.setState({locirepeatsString: event.target.value});\r\n  }\r\n\r\n  handleChangeIters(event) {\r\n    this.setState({numIters: event.target.value});\r\n  }\r\n\r\n  render() {\r\n    const timeEstimationStyles = {\r\n      marginLeft: '5px',\r\n    }\r\n    return (\r\n      <Popup trigger={<button className=\"main-button run-button shadow\">Run Test</button>} position=\"bottom left\">\r\n        <div className=\"popup-box\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <label htmlFor=\"InputFile\">Excel File:</label><br/>\r\n            <input type=\"file\" name=\"InputFile\" onChange={this.handleChangeFile}/><br/><br/>\r\n\r\n            <label htmlFor=\"locirepeats\">Loci Repeats:</label><br/>\r\n            <input type=\"text\" value={this.state.locirepeatsString} name=\"locirepeats\" onChange={this.handleChangeLocirepeats}/><br/><br/>\r\n\r\n            <label htmlFor=\"numIts\">Number of Iterations:</label><br/>\r\n            <input type=\"number\" value={this.state.numIters} name=\"numIts\" onChange={this.handleChangeIters}/>\r\n\r\n            <hr/>\r\n\r\n            <input type=\"submit\" value=\"Run Test\"/>\r\n            {this.state.inputFile &&\r\n              <span style={timeEstimationStyles}>(Estimated Time: <b>{estimateRunTime(this.state.inputFile, this.state.numIters).toFixed(2)}s</b>)</span>\r\n            }\r\n          </form>\r\n        </div>\r\n      </Popup>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\n/*\r\nCreates a settings button that toggles the visibility of a popup allowing the user to view\r\nassociated email account, and eventually change language preferences and password.\r\n\r\nTODO: add functionality for password change (after creating user), make text abstract\r\nto allow for language changes\r\n*/\r\n\r\nexport default function Settings(props) {\r\n  return (\r\n    <Popup trigger={<button className=\"settings main-button shadow\" style={{display:'flex', justifyContent:'center'}}>Settings</button>} position=\"bottom right\">\r\n      <div className=\"settings-data popup-box\">Select a language: <br/><select name='language'><option value='english'>English</option></select></div>\r\n    </Popup>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { useState, useMemo } from 'react';\r\n\r\n/**\r\n * A generic table with sortable columns, based on this tutorial from Smashing:\r\n * https://www.smashingmagazine.com/2020/03/sortable-tables-react/\r\n *\r\n * columnNames: An array of names to use as the column names in the table\r\n * columnSortKeys: For each column, the key in each \"item\" to access when sorting\r\n * items: An array of items to display in the table\r\n * itemToTableRowFunc: A function that takes in 1 item in \"items\" and returns a\r\n * table row (including <tr>...</tr>)\r\n */\r\nexport default function SortableTable({\r\n  columnNames,\r\n  columnSortKeys,\r\n  items,\r\n  itemToTableRowFunc}) {\r\n  const { sortedItems, requestSort, sortConfig } = useSortableData(items);\r\n  const getClassNamesFor = (name) => {\r\n    if (!sortConfig) {\r\n      return;\r\n    }\r\n    return sortConfig.key === name ? sortConfig.direction : undefined;\r\n  };\r\n\r\n  const styles = {\r\n    align: 'center',\r\n    margin: '0 auto',\r\n    width: '80%'\r\n  };\r\n\r\n  const buttonStyles = {\r\n    width: '100%',\r\n    height: '100%',\r\n    fontWeight: 'bold'\r\n  }\r\n\r\n  return (\r\n    <table style={styles} className=\"shadow\">\r\n      <thead>\r\n        <tr>\r\n          {\r\n            columnNames.map((columnName, i) => {\r\n              return (\r\n                <th key={columnName}>\r\n                  <button\r\n                    style={buttonStyles}\r\n                    type=\"button\"\r\n                    onClick={() => requestSort(columnSortKeys[i])}\r\n                    className={getClassNamesFor(columnSortKeys[i])}\r\n                  >\r\n                    {columnName}\r\n                  </button>\r\n                </th>\r\n              );\r\n            })\r\n          }\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {(sortedItems && sortedItems.length > 0)\r\n          ? sortedItems.map(item => itemToTableRowFunc(item))\r\n          : <tr><td style={{width: '100%', textAlign: 'center'}} colSpan={columnNames.length}>You haven't run any tests yet</td></tr>\r\n        }\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nconst useSortableData = (items, config = null) => {\r\n  const [sortConfig, setSortConfig] = useState(config);\r\n\r\n  // Memoize to cache sort results, saving time\r\n  const sortedItems = useMemo(() => {\r\n    let sortableItems = [...items];\r\n    if (sortConfig !== null) {\r\n      sortableItems.sort((a, b) => {\r\n        if (a[sortConfig.key] < b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? -1 : 1;\r\n        }\r\n        if (a[sortConfig.key] > b[sortConfig.key]) {\r\n          return sortConfig.direction === 'ascending' ? 1 : -1;\r\n        }\r\n        return 0;\r\n      });\r\n    }\r\n    return sortableItems;\r\n  }, [items, sortConfig]);\r\n\r\n  const requestSort = key => {\r\n    let direction = 'ascending';\r\n    if (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n      direction = 'descending';\r\n    }\r\n    setSortConfig({ key, direction });\r\n  }\r\n\r\n  return { sortedItems, requestSort, sortConfig };\r\n};\r\n","import React from 'react';\r\nimport JSZip from 'jszip';\r\nimport {saveAs} from 'file-saver';\r\nimport SortableTable from './SortableTable';\r\n\r\nexport default function DynTable(props) {\r\n  function renderResultRow(resultData) {\r\n    const {date, inputFilename, status, results} = resultData;\r\n    const csvFileText = results.output_file_text;\r\n    return (\r\n      <tr key={date.toISOString()}>\r\n        <td>{date.toLocaleDateString()}</td>\r\n        <td>{date.toLocaleTimeString()}</td>\r\n        <td>{inputFilename}</td>\r\n        <td>{status}</td>\r\n        <td>{getResultDownloadLinks(csvFileText)}</td>\r\n      </tr>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 align='center'>Results</h1>\r\n\r\n      <SortableTable\r\n        columnNames={['Date', 'Time', 'Input File Name', 'Status', 'Output']}\r\n        columnSortKeys={['date', 'date', 'inputFilename', 'status', '']}\r\n        items={\r\n          // Reverse so newest results appear at the top\r\n          Object.values(props.data).reverse()\r\n        }\r\n        itemToTableRowFunc={renderResultRow}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getResultDownloadLinks(csvFileText) {\r\n  if (!csvFileText) {\r\n    return '';\r\n  }\r\n\r\n  const probability_filename = 'probability_of_recrudescence.csv';\r\n\r\n  let extra_filenames = Object.keys(csvFileText);\r\n  // Remove probability file from those included in .zip\r\n  extra_filenames.splice(extra_filenames.indexOf(probability_filename), 1);\r\n\r\n  return (\r\n    <div>\r\n      <CSVDownloadLink\r\n        key={probability_filename}\r\n        csvFileName={probability_filename}\r\n        csvFileText={csvFileText[probability_filename]}\r\n      />\r\n      <ZipDownloadLink\r\n        fileNames={extra_filenames}\r\n        fileContentDict={csvFileText}\r\n        downloadName=\"advanced_stats\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ZipDownloadLink = ({fileNames, fileContentDict, downloadName}) => {\r\n  let zip = new JSZip();\r\n  for (let filename of fileNames) {\r\n    const csvText = fileContentDict[filename];\r\n    zip.file(filename, csvText);\r\n  }\r\n\r\n  return (\r\n    <p><a\r\n      href=\"#\"\r\n      onClick={(evt) => {\r\n        evt.preventDefault();\r\n        zip.generateAsync({type: 'blob'}).then(\r\n          zipContent => saveAs(zipContent, `${downloadName}.zip`)\r\n        );\r\n      }}>\r\n        {downloadName}.zip\r\n    </a></p>\r\n  );\r\n};\r\n\r\nconst CSVDownloadLink = ({csvFileName, csvFileText}) => {\r\n  const csvText = `data:text/csv;charset=utf-8,${csvFileText}`;\r\n  const csvUri = encodeURI(csvText);\r\n  return (\r\n    <p><a href={csvUri} download={csvFileName}>{csvFileName}</a></p>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {Line} from 'rc-progress'\r\n\r\nexport default function LoadingBar({percentCompleted, secondsRunning}) {\r\n  // Convert from \"0 to 1.0\" to \"0 to 100\" scale\r\n  percentCompleted = percentCompleted * 100.0;\r\n  percentCompleted = Math.max(0, Math.min(100, percentCompleted));\r\n\r\n  secondsRunning = Math.round(secondsRunning);\r\n\r\n  return (\r\n    <div style={{width: \"100%\", textAlign: \"center\"}}>\r\n      <p style={{margin: \"2px\"}}>\r\n        {percentCompleted.toFixed(2)}% (Running for {secondsRunning}s)\r\n      </p>\r\n      <Line\r\n        percent={percentCompleted}\r\n        strokeColor=\"#84bc49\"\r\n        strokeWidth=\"1\"\r\n        trailWidth=\"1\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, {useState} from 'react';\r\nimport LoadingBar from './LoadingBar';\r\n\r\n/**\r\n * A loading bar where the time to complete is known in advance\r\n */\r\n\r\nexport default function PresetLoadingBar({timeToComplete=10.0}) {\r\n    const [startTime] = useState(Date.now());\r\n    const [secondsSinceStart, setSecondsSince] = useState(0.0);\r\n\r\n    // Set null completion times = 100% completion\r\n    timeToComplete = timeToComplete ? timeToComplete : 0.0001;\r\n\r\n    function updateTime() {\r\n        setSecondsSince((Date.now() - startTime) / 1000.0);\r\n    }\r\n    const percentCompleted = secondsSinceStart / timeToComplete;\r\n\r\n    // Update every 10ms\r\n    setTimeout(updateTime, 10);\r\n\r\n    const styles = {\r\n        'width': '30vw'\r\n    };\r\n\r\n    return (\r\n        <div style={styles}>\r\n            <LoadingBar percentCompleted={percentCompleted} secondsRunning={secondsSinceStart} />\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p>To read about the algorithm powering this application, check out its <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://aac.asm.org/content/59/10/6096\">article</a> in the American Society for Microbiology.  If you want to contribute to this project or examine the technology, the software is available on our <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/GTJuniorDesign0100-2020/anti-malarial-MCMC-bayesian-algorithm\">GitHub</a>.</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nimport Help from './Help';\r\nimport RunButton from './RunButton';\r\nimport Settings from './Settings';\r\nimport DynTable from './DynTable';\r\nimport PresetLoadingBar from './PresetLoadingBar';\r\nimport Footer from './Footer';\r\nimport {recrudescenceAPIRequest, estimateRunTime} from '../utils';\r\n\r\nexport default class MainScreen extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tableData: {}\r\n    }\r\n\r\n    this.createNewAlgoRun = this.createNewAlgoRun.bind(this);\r\n    this.updateRunValues = this.updateRunValues.bind(this);\r\n  }\r\n\r\n  createNewAlgoRun(inputFile, locirepeats, numIters) {\r\n    const runDatetime = new Date();\r\n    const runKey = runDatetime.toISOString();\r\n    const estimatedTime = estimateRunTime(inputFile, numIters);\r\n\r\n    // Add new run to state\r\n    this.setState({tableData: {...this.state.tableData,\r\n      [runKey]: {\r\n        date: runDatetime,\r\n        inputFilename: inputFile.name,\r\n        status: <PresetLoadingBar timeToComplete={estimatedTime}/>,\r\n        results: {}\r\n      }\r\n    }});\r\n\r\n    // Run algorithm on API\r\n    recrudescenceAPIRequest(inputFile, locirepeats, numIters)\r\n      .then(jsonData => {\r\n        // Update w/ algorithm results if successful\r\n        this.updateRunValues(runKey, {\r\n          results: jsonData,\r\n          // TODO: Use HTML instead of string?\r\n          status: `Completed (in ${jsonData.totalRunTime}s)`\r\n        });\r\n      }, errorJSON => {\r\n        // Update w/ algorithm failure message\r\n        // TODO: Use HTML instead of string?\r\n        this.updateRunValues(runKey, {status: `ERROR: ${errorJSON.message}`});\r\n      });\r\n  }\r\n\r\n  updateRunValues(runKey, newRunValues) {\r\n    this.setState({tableData: {\r\n      ...this.state.tableData,\r\n      [runKey]: {\r\n        ...this.state.tableData[runKey],\r\n        ...newRunValues\r\n      }\r\n    }});\r\n  }\r\n\r\n  render() {\r\n    const tableStyle = {\r\n        gridColumnStart: 2,\r\n        gridRowStart: 5\r\n    };\r\n\r\n    return (\r\n      <div className=\"main-screen\">\r\n        <div className=\"joined-buttons top-left\">\r\n          <RunButton handleSubmit={this.createNewAlgoRun}/>\r\n          <Help />\r\n        </div>\r\n        <Settings />\r\n\r\n        <div style={tableStyle}>\r\n          <DynTable data={this.state.tableData}/>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport MainScreen from './components/MainScreen';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <MainScreen />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}