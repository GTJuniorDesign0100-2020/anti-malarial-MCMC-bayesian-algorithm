Intermediate Pseudo Code Translation of recode-alleles.r

#######################################################################################
# Function 1: RECODE ALLELE
# Notes:
#   Function seems to take arguments:
#       - tuple containing upper and lower bounds.
#       - set of alleles to compare.
#
#   From here, the set of alleles are filtered based on the boundries passed.
#   If no alleles pass thru the filter, the returned value is 'NA',
#   (I assume this is important for use in mcmc.r - needs conformation.)
#   else, return a vector of all passed items.
#######################################################################################

recodeallele = function(alleles_definitions_subset,proposed) {

	ret = which(proposed > alleles_definitions_subset[,1] & proposed <= alleles_definitions_subset[,2])
	if (length(ret) == 0) {
		ret = NA
	}
	ret
}

#######################################################################################
# FUNCTION 2: RECODE ALLELES
# Notes:
#   More complex operation. Will take more time to digest.
#   Doesn't appear to be called in mcmc.r ...?
#   As a function definition, it seems like this code isn't run on source call.
#   So..... it seems to be vestigial...?
#######################################################################################

recode_alleles = function(genotypedata, alleles_definitions) {

########### generate MOI for each sample

ids = unique(unlist(strsplit(genotypedata$Sample.ID[grepl("Day 0",genotypedata$Sample.ID)]," Day 0")))
locinames = unique(sapply(colnames(genotypedata)[-1],function(x) strsplit(x,"_")[[1]][1]))
nids = length(ids)
nloci = length(locinames)


MOI0 = rep(0,nids)
MOIf = rep(0,nids)

# for each individual,
# cycle through each locus and count number of separate alleles

for (i in 1:nids) {
	for (j in 1:nloci) {
		locicolumns = grepl(paste(locinames[j],"_",sep=""),colnames(genotypedata))
		nalleles0 = sum(!is.na(genotypedata[grepl(paste(ids[i],"Day 0"),genotypedata$Sample.ID),locicolumns]))
		nallelesf = sum(!is.na(genotypedata[grepl(paste(ids[i],"Day Failure"),genotypedata$Sample.ID),locicolumns]))

		MOI0[i] = max(MOI0[i],nalleles0)
		MOIf[i] = max(MOIf[i],nallelesf)
	}
}



observeddatamatrix = list()
for (j in 1:nloci) {
	locus = locinames[j]
	locicolumns = grepl(paste(locus,"_",sep=""),colnames(genotypedata))
	oldalleles = as.vector(genotypedata[,locicolumns])
	if (length(dim(oldalleles)[2]) == 0) {
		oldalleles = matrix(oldalleles,length(oldalleles),1)
	}
	newalleles = oldalleles
	ncolumns = dim(oldalleles)[2]
	for (i in 1:ncolumns) {
		newalleles[,i] = (sapply(1:dim(oldalleles)[1],function (x) recodeallele(alleles_definitions[[j]],oldalleles[x,i])))
	}
	newalleles[is.na(newalleles)] = ""

	tempobservedata = c()
	for (i in 1:nids) {
		locicolumns = grepl(paste(locinames[j],"_",sep=""),colnames(genotypedata))
		day0alleles = newalleles[grepl(paste(ids[i],"Day 0"),genotypedata$Sample.ID),]
		day0alleles = day0alleles[day0alleles != ""]
		dayfalleles = newalleles[grepl(paste(ids[i],"Day Failure"),genotypedata$Sample.ID),]
		dayfalleles = dayfalleles[dayfalleles != ""]
		tempobservedata[i] = paste(paste(sort(unique(as.numeric(day0alleles))),collapse="-"),paste(sort(unique(as.numeric(dayfalleles))),collapse="-"),sep="/")
	}
	observeddatamatrix[[j]] = tempobservedata
}
MOItemp = cbind(MOI0,MOIf)
rownames(MOItemp) = ids
list(observeddatamatrix = observeddatamatrix, MOI = MOItemp)
}